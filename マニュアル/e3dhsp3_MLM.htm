<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<META name="GENERATOR" content="IBM WebSphere Studio Homepage Builder Version 11.0.0.0 for Windows">
<META http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<META http-equiv="Content-Style-Type" content="text/css">
<TITLE></TITLE>
</HEAD>
<BODY>
<P><FONT size="+3">マルチレイヤーモーションとは？</FONT><BR>
<BR>
<BR>
マルチレイヤーモーションとは、ボーンごとに異なるモーションを再生させる仕組みのことです。<BR>
どういうときに便利かというと、例えば、下半身は走りながら上半身は銃を打つモーションをするとか<BR>
上半身は拾ったものを持った状態のまま下半身は歩くモーションをするとかいう場合に便利です。<BR>
<BR>
Easy3Dのマルチレイヤーモーションには、モーションアクセラレータ（以下略してMOA）対応版とMOA非対応版の命令があります。<BR>
<BR>
どちらの場合もボーンごとに条件を設定可能にするために、listとnotlistという２つの配列を引数にとります。<BR>
まずは、これらlist, notlistの使い方を説明します。<BR>
<BR>
list, notlistはボーンの番号をセットした配列です。<BR>
listには処理を行いたいボーンの内、一番親の番号を記述します。<BR>
listに指定した番号とその子供全部に対して再帰的に処理を行います。<BR>
notlistには除外したいボーンの内、一番親の番号を記述します。<BR>
notlistに記述した番号は、listに記述した番号よりも優先されます。<BR>
list, notlistには複数の番号を指定できるが、一番最後の要素には０をセットしなければなりません。<BR>
listの先頭要素に限り-1を指定できます。<BR>
-1指定はすべてのボーンに対する処理を表します。<BR>
<BR>
list, notlistへの値のセットの仕方の例を示します。<BR>
<BR>
左肩のボーン番号を２、左ひじの番号を３、左手の番号を４、<BR>
右肩のボーン番号を１２、右ひじの番号を１３、右手の番号を１４、<BR>
手に持っている武器のボーン番号を２２として<BR>
武器を除く手の部分にモーションを設定したい場合は、<BR>
<BR>
list(0) = 2<BR>
list(1) = 12<BR>
list(2) = 0<BR>
<BR>
notlist(0) = 22<BR>
notlist(1) = 0<BR>
<BR>
（Win３２版では（）は[　]　に直してください。）<BR>
<BR>
のようにlist, notlistの配列に値をセットして命令を呼び出します。<BR>
２を指定すれば２の子供全部に処理が行われるので３，４を指定する必要はありません。<BR>
同様に１２を指定すれば１２の子供全部に処理が行われるので１３，１４を指定する必要はありません。<BR>
リストの最後には必ず0を指定します。<BR>
      <BR>
list, notlistの使い方がお分かりいただけたと思います。<BR>
これらを使いこなせば、望んだボーンにだけ任意の命令を処理させることができます。<BR>
ではそろそろ具体的な命令を見てみましょう。<BR>
<BR>
<BR>
○<B>MOA非対応版のマルチレイヤーモーション</B><BR>
MOA非対応版のサンプルはe3dhsp3_MultiLayerMotion.hspにありますので、まずはそれをごらんください。<BR>
listとnotlistの使い方が分かっていれば簡単です。<BR>
E3DSetMotionKindMLという命令で、listとnotlistで指定したボーンにだけ任意のモーションを設定させます。<BR>
そして、E3DSetNewPoseの代わりにマルチレイヤーモーションでは、E3DSetNewPoseMLを呼び出します。<BR>
これだけでOKです。<BR>
<BR>
○<B>MOA対応版のマルチレイヤーモーション</B><BR>
MOA対応版のサンプルはe3dhsp3_MultiLayerMotion_MOA.hspにありますのでご覧ください。<BR>
MOA対応版を使うことにより、モーションとモーションのつなぎ目で自動的に補間モーションが再生されるようにすることが可能です。<BR>
通常のMOAではE3DSetNewPoseByMOAを呼び出していましたが、マルチレイヤーモーションでは、<BR>
設定したいボーンごとにE3DSetMOAEventNoMLを呼び出し、<BR>
すべてのE3DSetMOAEventNoMLが終わったらE3DSetNewPoseMLを一回呼び出します。<BR>
<BR>
こつは複数回のE3DSetMOAEventNoML呼び出しで、すべてのボーンについて取りこぼしなくイベント番号を指定することです。<BR>
またイベントが無い場合はイベント番号に０を指定して呼び出すことを忘れないことです。<BR>
イベント番号０を渡すことによりモーションが終了したときにアイドリングモーションへ移行できます。<BR>
<BR>
モーションの変更はボーンごとに任意のタイミングで行われますが、アイドリングだけは全ボーンが同期するように変更されます。<BR>
例えば、上半身と下半身とに分けて制御している場合、<BR>
ある時点で上半身がアイドリングになり、５フレーム後に下半身がアイドリングになったとします。<BR>
このとき、上半身と下半身とでアイドリングに移るタイミングは異なりますが、上半身と下半身がアイドリングモーションになっているときは<BR>
アイドリングモーションの同じフレーム番号を再生します。<BR>
つまり５フレームのずれは、自動的に吸収されて同期して再生されるということです。<BR>
<BR>
<BR>
○<B>マルチレイヤーモーション使用時の注意点</B><BR>
マルチレイヤーモーションではボーンごとに異なるモーションを再生するために<BR>
ある時点での姿勢情報は、その時になってみないと計算できません。<BR>
そのため、モーションIDとフレーム番号を渡して情報を取得するような命令は使えなくなります。<BR>
<BR>
例えば疑似親子を実装している場合、<BR>
E3DGetBonePosとE3DGetBoneQを使用していると思います。<BR>
これらE3DGetBonePosとE3DGetBoneQは上記の理由で、マルチレイヤーモーションでは使用できないので<BR>
代わりにE3DGetCurrentBonePosとE3DGetCurrentBoneQを使用する必要があります。<BR>
これらの命令はE3DSetNewPoseMLで確定した姿勢情報を元に情報を返すので、マルチレイヤーでも使用可能なのです。<BR>
<BR>
<BR>
<A href="index.htm">トップページに戻る</A><BR>
</P>
</BODY>
</HTML>